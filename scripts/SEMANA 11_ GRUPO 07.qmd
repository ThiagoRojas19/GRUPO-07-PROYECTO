---
title: "ANALISIS DE SUPERVIVENCIA - SEMANA 11"
author: "GRUPO 07"
format: html
editor: visual
---

# PC 3 - ACTIVIDAD 1

# GRUPO 07 - INTEGRANTES

-   Thiago Aldhair Peter Infante Rojas

-   Susan Angelica Rivera Allcca

-   Quiroz Robles Sebastian Joaquin

-   Rojas Quispe Eloisa Milagros

-   Pilar del Carmen Barnachea Hilario

### Instalar (si es necesario)

```{r}
install.packages("broom")
install.packages("survival")
install.packages("survminer")
install.packages("ggsurvfit")
```

### Cargar paquetes

```{r}
library(tidyverse)
library(lubridate)
library(survival)
library(survminer)
library(gtsummary)
library(broom)
library(here)
library(rio)
library(ggsurvfit)
```

# 1 Analizando datos de tiempo a evento

abordaremos 2 de las principales técnicas para realizar análisis de supervivencia:

-   Análisis de supervivencia usando el método de Kaplan-Meier
-   Regresión de riesgos proporcionales (PH) de Cox

## 1.1 Censura

Una característica clave en datos de supervivencia es la censura para un participante (una observación). La censura de un participante puede ocurrir por al menos 3 razones: 1) Perdida de seguimiento 2) Retiro del estudio 3) El evento no ocurre al término del periodo de estudio. Todos estos son ejemplos de "censura a la derecha", dado que ocurren luego del incio del estudio. Hay otros tipos de censura, menos frecuentes.

# Estimaciones de supervivencia usando el método de Kaplan-Meier

## 2.1 El dataset para este ejercicio

El dataset covid_19_diabetes contiene datos de 686 individuos. Para el primer ejecicio haremos uso de las siguientes 3 variables:

-   duraci_hospita_dias: duracion de hospitalizacion en dias
-   desenla_fallecido: indica si el parcipante tuvo "Sí" = fallecido (evento), "No" = censura
-   enfer_renal: si el paciente tiene o no una enfermedad renal (si o no).

Cargando el dataset covid_diabetes

```{r}
covid_diabetes <- import(here("data", "covid_19_diabetes.csv"))
```

VISTAZO DEL DATASET:

```{r}
covid_diabetes |> 
  select(duraci_hospita_diaz, enfer_renal, desenla_fallecido) |> 
  summary()
```

PRIMERO TENEMO QUE CONVERTIR NUESTRA VARIABLE DESENLA_FALLECIDO A CODIGO BINARIO PARA QUE SEA COMPATIBLE y que Kaplan-Meier funcione.

```{r}
covid_diabetes$desenla_fallecido <- ifelse(covid_diabetes$desenla_fallecido == "Sí", 1, 0)
```

## 2.2 El desenlace en el análisis de supervivencia

Kaplan-Meier estima la probabilidad de supervivencia para distintos puntos de tiempo. En R, usamos la función `Surv()` para crear la variable "respuesta" o desenlace. Este tipo de desenlace incluye a su vez estado del participante (con el evento o sin el evento) y tiempo.

```{r}
Surv(covid_diabetes$duraci_hospita_diaz, covid_diabetes$desenla_fallecido)
```

El resultado en este chunk indica el estado (desenlace) de los participantes. El participante 1 estuvo hospitalizado 15 días (no tuvo el evento , no falleció). El participante 2 estuvo hospitalizado 14 dias (no tuvo el evento , no falleció). El parcipante 8 estuvo hospitalizado 2 días y tuvo el evento (fallecio). El paciente 14 estuvo hospitalizado 9 dias y tuvo el evento (fallecio)

La variable "respuesta" la incluimos en la función survfit para estimar la probabilidad de supervivencia (una curva) usando el método de Kaplan-Meier. Aquí estimados la curva de superviencia global sin considerar ningun predictor. Es por ello que añadimos "\~ 1" a la formula. Esa parte será reemplazada más adelante por algun predictor o covariable de interés

```{r}
km = survfit(Surv(duraci_hospita_diaz, desenla_fallecido) ~ 1, data = covid_diabetes)
```

¿Qué hay dentro del objeto km?

```{r}
str(km)
```

## 2.3 Gráficos de Kaplan-Meier

La información contenida en el objeto creado con las estimaciones puede ser mejor visualizada en los gráficos de Kaplan-Meier.

```{r}
survfit2(Surv(duraci_hospita_diaz, desenla_fallecido) ~ 1, data = covid_diabetes) |>  
  ggsurvfit() +
  labs(
    x = "Días",
    y = "Probabilidad de supervivencia global"
  ) +
  add_censor_mark()
```

La función `add_confidence_interval()` añade los intervalos de confianza al 95% (sombreado en gris) para las estimaciones de probabilidad de supervivencia.

```{r}
survfit2(Surv(duraci_hospita_diaz, desenla_fallecido) ~ 1, data = covid_diabetes) |>  
  ggsurvfit() +
  labs(
    x = "Días",
    y = "Probabilidad de supervivencia global"
  ) + 
  add_censor_mark() +
  add_confidence_interval() +
  add_risktable()
```

**¿Cómo interpretar?**

En la gráfica de Kaplan-Meier generada a partir de los datos de pacientes con covid19 y diabe, se muestra la probabilidad de supervivencia global a lo largo del tiempo (días). Las marcas de censura, líneas verticales (añadidas con `add_censor_mark()`), señalan a aquellos pacientes que no experimentaron el evento al final del periodo de seguimiento o que fueron retirados del estudio antes de concluir el tiempo de observación. Estos pacientes censurados no afectan la probabilidad acumulada en el momento de su censura, pero reducen el número de sujetos en riesgo en los intervalos posteriores.

El intervalo de confianza del 95% (representado mediante bandas alrededor de la curva) proporciona una estimación de la incertidumbre asociada a la probabilidad de supervivencia en cada punto temporal. Nota que a medida que transcurre el tiempo, el intervalo de confianza al 95%, es más ancha, es decir, menos preciso.

Finalmente, la tabla de riesgo ubicada bajo la gráfica (generada con `add_risktable()`) muestra el número de pacientes que permanecen en riesgo en distintos momentos del seguimiento, lo que facilita la interpretación de la robustez de la estimación de la curva a lo largo del tiempo.

## 2.4 Estimación de la supervivencia a x años.

Al analizar datos de supervivencia es común que nos preguntemos, por ejemplo, ¿Cuál es la probabilidad de supervivencia después de 1 año de seguimiento? Esto lo calculamos a partir de usar la función survfit(), añadiendo el arguemento times.

```{r}
summary(covid_diabetes$duraci_hospita_diaz)
```

```{r}
summary(survfit(Surv(duraci_hospita_diaz, desenla_fallecido) ~ 1, data = covid_diabetes), times = c(5, 10, 20, 30, 40, 50, 60))
```

El análisis de supervivencia mediante el método de Kaplan-Meier muestra que la probabilidad de supervivencia disminuye notablemente con el aumento del tiempo de hospitalización. A los 5 días, la supervivencia era del 86.8%, mientras que a los 20 días se redujo al 45.7%, y a los 40 días apenas el 16.1% de los pacientes seguían vivos. Esta disminución progresiva resalta la importancia del tiempo de hospitalización como un posible predictor de mal pronóstico en pacientes con COVID-19.

```{r}
survfit2(Surv(duraci_hospita_diaz, desenla_fallecido) ~ 1, data = covid_diabetes) |>
  ggsurvfit() +
  labs(
    x = "Días",
    y = "Probabilidad de supervivencia global"
  ) + 
  add_confidence_interval() +
  add_risktable() +
  add_quantile(x_value = 365.25, linewidth = .7)
```

### 2.5 Estimación mediana del tiempo de supervivencia

Otro dato importante a estimar es la mediana de supervivencia. Típicamente, los datos de supervivencia no tendrán una distribución normal. Asi que, la mediana es preferida sobre la media aritmética.

```{r}
survfit(Surv(duraci_hospita_diaz, desenla_fallecido) ~ 1, data = covid_diabetes)
```

La mediana de supervivencia corresponde a la probabilidad de supervivencia de 0.5. Para este dataset, la mediana es de 18 días. En el gráfico de Kaplan Meier

```{r}
survfit2(Surv(duraci_hospita_diaz, desenla_fallecido) ~ 1, data = covid_diabetes) |>
  ggsurvfit() +
  labs(
    x = "Días",
    y = "Probabilidad de supervivencia global"
  ) + 
  add_confidence_interval() +
  add_risktable() +
  add_quantile(y_value = 0.5, linewidth = .7)
```

## ¿Cómo reportar?

Usando el paquete gtsummary podemos generar una tabla con datos de la supervivencia al año.

```{r}
theme_gtsummary_language(language = "es")
```

```{r}
survfit(Surv(duraci_hospita_diaz, desenla_fallecido) ~ 1, data = covid_diabetes) %>% 
  tbl_survfit(
    times = 30,
    label_header = "**Supervivencia a 30 días (IC 95%)**"
  )
```

```{r}
survfit(Surv(duraci_hospita_diaz, desenla_fallecido) ~ 1, data = covid_diabetes) |>  
  tbl_survfit(
    probs = 0.5,
    label_header = "**Supervivencia a 30 días (IC 95%)**"
  )
```

## 1.1 Comparando tiempos de supervivencia entre dos grupos

En el conjunto de datos `Covid_diabetes`se incluyen tanto pacientes con enfermedad renal o no. Un análisis de interés consiste en evaluar si los tiempos de supervivencia difieren significativamente entre ambos grupos. Para ello, se utiliza la función `survdiff()`, que permite aplicar la prueba de log-rank y estimar si existen diferencias en las curvas de supervivencia.

```{r}
survdiff(Surv(duraci_hospita_diaz, desenla_fallecido) ~ enfer_renal, data = covid_diabetes)
```

El valor de p = 0.3 de la prueba de log-rank indica que no existe una diferencia estadísticamente significativa en la supervivencia global entre pacientes con enfermedad renal y pacientes sin enfermedad renal.

El siguiente gráfico de Kaplan-meier muestra el resultado de la prueba de log-rank.

```{r}
survfit2(Surv(duraci_hospita_diaz, desenla_fallecido) ~ enfer_renal, data = covid_diabetes) |>
  ggsurvfit() +
  labs(
    x = "Días",
    y = "Supervivencia global"
  ) + 
  add_confidence_interval() +
  add_risktable() +
  add_pvalue(caption = "Log-rank {p.value}")
```

# 3 El modelo de regresión de Cox

La prueba de log-rank no ofrece una medida de efecto y solo permite evaluar una única variable independiente a la vez. Sin embargo, en investigación suele ser necesario cuantificar el tamaño del efecto de una o varias variables, e incluso realizar un análisis multivariable. Para este propósito, el modelo de regresión de Cox es una herramienta adecuada para analizar datos con desenlaces de supervivencia.

## 3.1 El dataset para este ejercicio

El dataset para esta parte de la sesión incluye información de 686 pacientes. Entre las variables estan:

-   duraci_hospita_dias: duracion de hospitalizacion en dias
-   desenla_fallecido: indica si el parcipante tuvo "Sí" = fallecido (evento), "No" = censura
-   enfer_renal: si el paciente tiene o no una enfermedad renal (si o no).

En R, este modelo se puede ajustar utilizando la función `coxph()` del paquete **survival**

```{r}
coxph(Surv(duraci_hospita_diaz, desenla_fallecido) ~ enfer_renal, data = covid_diabetes)
```

## 3.2 Interpretación y reporte

Entre los resultados, el valor p indica que no existe una asociación estadísticamente significativa entre la covariable enfermedad renal y el fallecimiento. Sin embargo, el coeficiente y su intervalo de confianza al 95%, ambos en escala exponenciada, son las medidas de interés y son las que se reportan en un informe científico. Estas tablas de resultados pueden obtenerse con la función `tbl_regression()` del paquete gtsummary, utilizando la opción `exponentiate = TRUE` para mostrar la razón de riesgos (hazard ratio, HR) en lugar del logaritmo del riesgo.

```{r}
coxph(Surv(duraci_hospita_diaz, desenla_fallecido) ~ enfer_renal, data = covid_diabetes) %>% 
  tbl_regression(exp = TRUE)
```

En esta tabla, el HR representa la razón de tasas de ocurrencia del evento entre dos grupos en un momento dado. Se interpreta como la tasa instantánea de ocurrencia del evento en aquellos que aún están en riesgo. Una HR \< 1 indica una menor tasa de ocurrencia del evento (por ejemplo, muerte), mientras que una HR \> 1 indica una tasa mayor. En la presente tabla, una HR =1.20 indica que, en cualquier momento del seguimiento, los pacientes con enfermedad renal presentaron un 20% mayor riesgo de fallecer en comparación con aquellos sin enfermedad renal. En otras palabras, los pacientes con enfermedad renal tienen un riesgo instantáneo de fallecer 20% mayor que aquellos sin enfermedad renal, según nuestro dataset

### 3.3 Reporte para multiple variables

Es frecuente que en un estudio que incluya datos de supervivencia sea de interés evaluar multiples covariables. En R, usando la función `tbl_uvregression()` podemos generar modelos univariables simples para todas las covariables. A cambio, obtenemos la HR cruda para todas las covariables de interés.

```{r}
tabla_cox <- covid_diabetes |>
  tbl_uvregression(
    include = c(raza_negra, raza_blanca, asiatico, latino, enfer_cardiovascular, infacto_mioc, falla_card_conges),
    y = Surv(duraci_hospita_diaz, desenla_fallecido),
    method = coxph,
    exponentiate = TRUE,
    conf.int = TRUE,
    hide_n = TRUE,
    add_estimate_to_reference_rows = FALSE,
    pvalue_fun = ~ style_pvalue(.x, digits = 3),
    estimate_fun = ~ style_number(.x, digits = 2),
    label = list(
      raza_negra ~ "Raza negra",
      raza_blanca ~ "Raza blanca",
      asiatico ~ "Asiaticos",
      latino ~ "Latinos",
      infacto_mioc ~ "infarto miocardio",
      falla_card_conges ~ "Insuficiencia Cardiaca Congestiva",
      enfer_cardiovascular ~ "Enfermedad cardiovascular"
    )
  ) |>
  bold_p(t = 0.05) |>
  modify_header(estimate = "**HR no ajustado**", p.value = "**Valor P**")
```

Imprimimos la tabla

```{r}
tabla_cox
```
